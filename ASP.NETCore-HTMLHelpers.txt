HTML Helpers in ASP.NET Core:
----------------------------------------------
As we all know that while developing the UI screen we use HTML elements. HTML tags are very simple and easy to use. HTML Helpers for simple HTML elements. It is collection of methods avaialble in the HTML property of the Page/View.

Note: HTML Helpers are not new in ASP.NET Core as it is coming from ASP.NET MVC itself.

A HTML Helper is just a method that returns a string. The string can represent any type of content that we want. For example, we can use HTML Helpers to render standard HTML tags like HTML <input>, <img>, <select> tags etc...

We can also use HTML Helpers to render more complex content such as a tab strip or an HTML table of database data.

HTML Helpers are simple functions/methods that let the developer to specify the type of HTML needed on the page/view. The final HTML will be generated by these functions at the runtime so we don't have to worry about the correctness of generated HTML.

HTML Helpers are the equivalent to ASP.NET Web Forms controls. Like a web form control, an HTML helper enables you to encapsulate the rendering of HTML. However, unlike a Web form control, HTML helpers are extremely lightweight, For example, an HTML helper does not have an event model and does not use view state.

Why we need HTML Helpers?
------------------------------------------
-> Instead of directly placing the HTML element inside the Page/View, we can use the HTML helper method to place the tag. While rendering these methods call will replaced with right HTML tag.

-> It makes sure elements has proper names and values for model binding and elements display the appropriate error message when model binding fails.

-> There are many extension methods of HtmlHelper class, which creates different html controls. In other words we can say, for rapid development of a Page/View we can use a HTMLHelper class which contains many extension methods that we can use to create an HTML element.

Points to Remember:
------------------------------
- HTML Helpers are the extension methods that generate html.

- HTML Helpers are not controls, they simply generate html markup.

- HTML Helpers are the methods you can invoke on the Html property of a Page/View.

Standard HTML Helpers:
-----------------------------------
These are following most commonly used standard html helpers:

	Html.ActionLink()
	Html.BeginForm()
	Html.EndForm()
	Html.Lable()
	Html.TextBox()
	Html.Password()
	Html.TextArea()
	Html.CheckBox()
	Html.RadioButton()
	Html.DropDownList()
	Html.ListBox()
	Html.Hidden()

Html.ActionLink(): 
-------------------------
The Html.ActionLink() does not link to a page. Instead, you use the Html.ActionLink() helper method to create a link to a controller action in MVC framework application.

1. ActionLink(string linkText, string actionName)

@Html.ActionLink("List Page", "List")

Rendered Output:

<a href="/Employee/List">List Page</a>

2. ActionLink(string linkText, string actionName, string controllerName)

@Html.ActionLink("Privacy Page", "Privacy","Home")

Rendered Output:

<a href="/Home/Privacy">Privacy Page</a>

@Html.ActionLink("Home Page", "Index","Home")

Rendered Output:

<a href="/">Home Page</a>

3. ActionLink(string linkText, string actionName, TModel routeValues)

@Html.ActionLink("Details Page", "Details", new { id = 101 })

Rendered Output:

<a href="/Employee/Details/101">Details Page</a>

4. ActionLink(string linkText, string actionName, string controllerName, TModel routeValues)

@Html.ActionLink("User's Detail Page", "Details", "User", new { id = 101 })

Rendered Output:

<a href="/User/Details/101">User's Detail Page</a>

5. ActionLink(string linkText, string actionName, TModel routeValues, TModel htmlAttributes)

@Html.ActionLink("Details Page", "Details", new { id = 101 }, new { style = "color:red", target = "_blank" })

Rendered Output:

<a href="/Employee/Details/101" style="color:red" target="_blank">Details Page</a>

6. ActionLink(string linkText, string actionName, string controllerName, TModel routeValues, TModel HtmlAttributes)

@Html.ActionLink("User's Detail Page", "Details", "User", new { id = 101 }, new { style = "color:red", target = "_blank" })

Rendered Output:

<a href="/User/Details/101" style="color:red" target="_blank">User's Detail Page</a>

7. ActionLink(string linkText, string actionName, string controllerName, string protocol, string host, string fragment, TModel routeValues, TModel htmlAttributes)

@Html.ActionLink("User's Detail Page", "Details", "User","http", "localhost:14360", "detailsFragment",new { id = 101 },new {style="color:red" })

Rendered Output:

<a href="http://localhost:14360/User/Details/101#detailsFragment" style="color:red">User's Detail Page</a>

Html.BeginForm() & Html.EndForm():
----------------------------------------------------
Html.BeginForm() renders the opening <form> tag to the response whereas Html.EndForm() renders the closing </form> tag to the response.

@{ Html.BeginForm();}

@{ Html.EndForm();}

Renders Output:
In MVC:
------------
<form action="/<ControllerName>/<ActionName>" method="post">
<input name="__RequestVerificationToken" type="hidden" value="CfDJ8FefzOepAPdMgF_vxVLDAE9OS-yrG4c9fhZ5FjW-RHm4vdvUhzqSU_hXCV4GLy_jE-ke-qFhjBmqrzaNFduzsVPu7T_J9USWnqt4nqDMDKKuqRRN77oC2zbPQZ37gKYOXDugnalmQa9JnTPS2yJsY50" />
</form>

In Razor Pages:
----------------------
<form action="/<PageName>" method="post">
<input name="__RequestVerificationToken" type="hidden" value="CfDJ8FefzOepAPdMgF_vxVLDAE9OS-yrG4c9fhZ5FjW-RHm4vdvUhzqSU_hXCV4GLy_jE-ke-qFhjBmqrzaNFduzsVPu7T_J9USWnqt4nqDMDKKuqRRN77oC2zbPQZ37gKYOXDugnalmQa9JnTPS2yJsY50" />
</form>

The opening and closing <form> tags are created with a using statement also as follows:

@using(Html.BeginForm()) {

}

Renders Output:
In MVC:
------------
<form action="/<ControllerName>/<ActionName>" method="post">
<input name="__RequestVerificationToken" type="hidden" value="CfDJ8FefzOepAPdMgF_vxVLDAE9OS-yrG4c9fhZ5FjW-RHm4vdvUhzqSU_hXCV4GLy_jE-ke-qFhjBmqrzaNFduzsVPu7T_J9USWnqt4nqDMDKKuqRRN77oC2zbPQZ37gKYOXDugnalmQa9JnTPS2yJsY50" />
</form>

In Razor Pages:
----------------------
<form action="/<PageName>" method="post">
<input name="__RequestVerificationToken" type="hidden" value="CfDJ8FefzOepAPdMgF_vxVLDAE9OS-yrG4c9fhZ5FjW-RHm4vdvUhzqSU_hXCV4GLy_jE-ke-qFhjBmqrzaNFduzsVPu7T_J9USWnqt4nqDMDKKuqRRN77oC2zbPQZ37gKYOXDugnalmQa9JnTPS2yJsY50" />
</form>

Note: Html.BeginForm() helper method supports many overload option that works with a controller & action which is used in MVC framework application only.

1. Html.BeginForm()

@using(Html.BeginForm()) {

}

Render Output:

<form action="/...." method="post">
.....
</form>

2. Html.BeginForm(FormMethod method)

@using(Html.BeginForm(FormMethod.Get)) {

}

Render Output:

<form action="/...." method="get">

</form>

3. Html.BeginForm(TModel routeValues)

@using(Html.BeginForm(new {id = 101})) {

}

Render Output:

In MVC:
<form action="/<ControllerName>/<ActionName>/101" method="post">
.....
</form>

In Razor Page:
<form action="/<PageName>?id=101" method="post">
.....
</form>

Note: In Razor Pages Framework application, by default route values renders in the form of query string as shown above but if you want to render in the form of route data as a part of URL segment then you must define route template with @page directive of target page as follows:

@page "{id?}"
...
...
@using (Html.BeginForm(new { id = 101 }))
{

}

Render Output:
<form action="/<PageName>/101" method="post">
.....
</form>

4. Html.BeginForm(bool? antiforgery)

@using(Html.BeginForm(false)) {

}

Render Output:

In MVC:
<form action="/<ControllerName>/<ActionName>" method="post">

</form>

In Razor Pages:
<form action="/<PageName>" method="post">

</form>

5. Html.BeginForm(FormMethod method, TModel htmlAttributes)

@using (Html.BeginForm(FormMethod.Post, new { id = "form1", style = "border:2px solid red" })) {

}

Render Output:

In MVC:
<form action="/<ControllerName>/<ActionName>" id="form1" method="post" style="border:2px solid red">   
........
</form>

In Razor Pages:
<form action="/<PageName>" id="form1" method="post" style="border:2px solid red">   
........
</form>

6. Html.BeginForm(string actionName, string controllerName)	(Use Only in MVC Framework Application)

@using(Html.BeginForm("Create","Employee"))
{

}

Render Output:

In MVC:
<form action="/Employee/Create" method="post">
....
</form>

7. Htnl.BeginForm(FormMethod method, bool? antiforgery, TModel htmlAttributes)

@using(Html.BeginForm(FormMethod.Post, false, new { id = "form1" })) {

}

Render Output:

In MVC:
<form action="/<ControllerName>/<ActionName>" id="form1" method="post">

</form>

In Razor Pages:
<form action="/<PageName>" id="form1" method="post">

</form>

8. Html.BeginForm(string actionName, string controllerName, FormMethod method) (Use only in MVC Framework Application)

@using(Html.BeginForm("Create", "Employee", FormMethod.Post)) {

}

Render Output:

In MVC:
<form action="/Employee/Create" method="post">
......
</form>

9. Html.BeginForm(string actionName, string controllerName, TModel routeValues) (Use only in MVC Framework Application)

@using(Html.BeginForm("Create","Employee",new {id = 101 })) {

}

Render Output:

In MVC:
<form action="/Employee/Create/101" method="post">
......
</form>

10. Html.BeginForm(string actionName, string controllerName, FormMethod method, TModel htmlAttributes) (Use only in MVC Framework Application)

@using(Html.BeginForm("Create","Employee", FormMethod.Post, new { id = "form1"})) {

}

Render Output:

In MVC:
<form action="/Employee/Create" method="post" id="form1">
......
</form>

11. Html.BeginForm(string actionName, string controllerName, TModel routeValues, FormMethod method) (Use only in MVC Framework Application)

@using(Html.BeginForm("Create","Employee", new { id = 101}, FormMethod.Post)) {

}

Render Output:

In MVC:
<form action="/Employee/Create/101" method="post">
......
</form>

12. Html.BeginForm(string actionName, string controllerName, TModel routeValues, FormMethod method, bool? antiforgery, TModel htmlAttributes) (Use only in MVC Framework Application)

@using(Html.BeginForm("Create","Employee", new { id = 101}, FormMethod.Post, false, new { id = "form1"})) {

}

Render Output:

In MVC:
<form action="/Employee/Create/101" method="post" id="form1">
....
</form>

Html.Lable():
-----------------
It represents support for the HTML label element in a Page/View.

Examples:
1.
@Html.Label("Name") //Expression

Render Output:
<label for="Name">Name</label>

2.
@Html.Label("Name","Enter Name") // Expression, LabelText

Render Output:
<label for="Name">Enter Name</label>

3.
@Html.Label("Name", "Enter Name", new {style="color:blue"}) //Expression, LabelText, HtmlAttribute

Render Output:
<label for="Name" style="color:blue">Enter Name</label>

4.
<style>
    .class1{
        color:blue;
        font-weight:bold;
    }
</style>

@Html.Label("Name","Enter Name",new { @class="class1"}) //Expression, LabelText, HtmlAttribute

Render Output:
<label class="class1" for="Name">Enter Name</label>

Note: HtmlAttribute can be also given in the form of Dictionary object as following:

@Html.Label("Name","Enter Name",new Dictionary<string, object>() { { "class", "class1" } }) //Expression, LabelText, HtmlAttribute

Render Output:
<label class="class1" for="Name">Enter Name</label>

Html.TextBox():
----------------------
This TextBox helper method renders an input tag with the type attribute set to text.

Examples:

1. 
@Html.TextBox("Name") //With Expression

Render Output:
<input id="Name" name="Name" type="text" value="" />

2. 
@Html.TextBox("Name","Smith") // Expression, Value

Render Output:
<input id="Name" name="Name" type="text" value="Smith" />

3. 
@Html.TextBox("Name",Model.Name) //Expression, Value (Model Data)

Render Output:
<input id="Name" name="Name" type="text" value="Smith" />

4.
@Html.TextBox("Salary",5000,"{0:N}") //Expression, Value, Format (Numeric Format)

Render Output:
<input id="Salary" name="Salary" type="text" value="5,000.00" />

5.
@Html.TextBox("Salary",5000,"{0:C}") //Expression, Value, Format (Currency Format)

Render Output:
<input id="Salary" name="Salary" type="text" value="₹ 5,000.00">

6.
@Html.TextBox("Date",DateTime.Now,"{0:D}") //Expression, Value, Format (Date Format)

Render Output:
<input id="Date" name="Date" type="text" value="24 September 2020">

7.
@Html.TextBox("Date",DateTime.Now,"{0:dd-MM-yyyy}") //Expression, Value, Format (Custom Date Format)

Render Output:
<input id="Date" name="Date" type="text" value="24-09-2020">

8. 
@Html.TextBox("Date",DateTime.Now,"{0:dddd, dd MMMM yyyy}") //Expression, Value, Format (Custom Date Format)

Render Output:
<input id="Date" name="Date" type="text" value="Thursday, 24 September 2020">

9.
@Html.TextBox("Name","Smith",new {style="color:red;background-color:yellow" }) //Expression, Value, HtmlAttribute

Render Output:
<input id="Name" name="Name" style="color:red;background-color:yellow" type="text" value="Smith">

Real Time Use of Html.Label() & Html.TextBox() Method:
--------------------------------------------------------------------------------
@Html.Label("Name", "Enter Name")
@Html.TextBox("Name")

Render Output:
<label for="Name">Enter Name</label>
<input id="Name" name="Name" type="text" value="">

@Html.Password():
-------------------------
@Html.Password() helper renders password field. It is similar to textbox helper but added to, it mask the password and does not retain the post value.

1. 
@Html.Password("Password") //Expression

Render Output:
<input id="Password" name="Password" type="password" />

2.
@Html.Password("Password","12345") //Expression, Value

Render Output:
<input id="Password" name="Password" type="password" value="12345" />

3. 
@Html.Password("Password",null,new { style = "background-color:yellow" }) //Expression, Value, HtmlAttribute

Render Output:
<input id="Password" name="Password" style="background-color:yellow" type="password" />

@Html.TextArea():
-------------------------
@Html.TextArea() method is used to render the "<textarea>" tag for multiline textbox. It also provides overload method to specify the no of columns and rows to display.

1.
@Html.TextArea("Address") // Expression

Render Output:
<textarea id="Address" name="Address">
</textarea>

2. 
@Html.TextArea("Address","16-15-11/N/120 S.R. Nagar Hyderabad") //Expression, Value

Render Output:
<textarea id="Address" name="Address">
16-15-11/N/120 S.R. Nagar Hyderabad
</textarea>

3.
@Html.TextArea("Address", new {style="border:2px solid red"}) //Expression, HtmlAttribute

Render Output:
<textarea id="Address" name="Address" style="border:2px solid red">
</textarea>

4.
@Html.TextArea("Address", "16-15-11/N/120 S.R. Nagar Hyderabad", new {style="border:2px solid red"}) //Expression, Value, HtmlAttribute

Render Output:
<textarea id="Address" name="Address" style="border:2px solid red">
16-15-11/N/120 S.R. Nagar Hyderabad
</textarea>

5. 
@Html.TextArea("Address", "16-15-11/N/120 S.R. Nagar Hyderabad",5, 75, new {style="border:2px solid red"}) //Expression, Value, Rows, Cols, HtmlAttribute

Render Output:
<textarea cols="75" id="Address" name="Address" rows="5" style="border:2px solid red">
16-15-11/N/120 S.R. Nagar Hyderabad
</textarea>

@Html.CheckBox():
----------------------------
@Html.CheckBox() method is used to renders checkbox in the Page/View.

1.
@Html.CheckBox("IsFeePaid") //Expression

Render Output:
<input id="IsFeePaid" name="IsFeePaid" type="checkbox" value="true" />
<input name="IsFeePaid" type="hidden" value="false" />

2. 
@Html.CheckBox("IsFeePaid", true) //Expression, isChecked

Render Output:
<input checked="checked" id="IsFeePaid" name="IsFeePaid" type="checkbox" value="true" />
<input name="IsFeePaid" type="hidden" value="false" />

3. 
@Html.CheckBox("IsFeePaid",new { id = "chkIsFeePaid" }) //Expression, HtmlAttribute

Render Output:
<input id="chkIsFeePaid" name="IsFeePaid" type="checkbox" value="true" />
<input name="IsFeePaid" type="hidden" value="false" />

4.
@Html.CheckBox("IsFeePaid",true,new { id = "chkIsFeePaid" }) //Expression, isChecked, HtmlAttribute

Render Output:
<input checked="checked" id="chkIsFeePaid" name="IsFeePaid" type="checkbox" value="true" />
<input name="IsFeePaid" type="hidden" value="false" />

@Html.RadioButton():
--------------------------------
A Radio Button can be created using @Html.RadioButton() method. RadioButtons are generally grouped together to provide a range of options for single selection value.

1.
@Html.RadioButton("Option1","Opt1") //Expression, Value

Render Output:
<input id="Option1" name="Option1" type="radio" value="Opt1" />

2.
@Html.RadioButton("Option1","Opt1",true) //Expression, Value, isChecked

Render Output:
<input checked="checked" id="Option1" name="Option1" type="radio" value="Opt1" />

3.
@Html.RadioButton("Option1","Opt1",new { id="rdbOption1" }) //Expression, Value, HtmlAttribute

Render Output:
<input id="rdbOption1" name="Option1" type="radio" value="Opt1" />

4.
@Html.RadioButton("Option1","Opt1",true,new { id="rdbOption1" }) //Expression, Value, isChecked, HtmlAttribute

Render Output:
<input checked="checked" id="rdbOption1" name="Option1" type="radio" value="Opt1" />

Creating a Group of RadioButtons:
-------------------------------------------------
<b>Gender: </b>
@Html.RadioButton("Gender", "Male", new { id = "rdbMale" })
@Html.Label("rdbMale", "Male")
@Html.RadioButton("Gender", "Female", new { id = "rdbFemale" })
@Html.Label("rdbFemale", "Female")

Render Output:
<b>Gender: </b>
<input id="rdbMale" name="Gender" type="radio" value="Male" />
<label for="rdbMale">Male</label>
<input id="rdbFemale" name="Gender" type="radio" value="Female" />
<label for="rdbFemale">Female</label>

@Html.DropDownList():
---------------------------------
@Html.DropDownList() method is used to renders a drowndown list. It basically generates select element with options. It renders a single selection select element using the specified html helper and the name of the form field.

1.
@Html.DropDownList("DropDownList1") //Expression

The above example code shows, the overload accepting only name. This is not enough. This overload would accept ViewData of type list passed. If ViewData with a list of items is not passed, the page will crash while rendering this helper method and generate the error as follows:

InvalidOperationException: There is no ViewData item of type 'IEnumerable<SelectListItem>' that has the key 'DropDownList1'.

To overcome the above problem we have a solution, in which first create ViewData item of type 'IEnumerable<SelectListItem> and pass it to a DropDownList helper method first parameter as following:

@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };

    ViewData["DropDownList1"] = items;
}

@Html.DropDownList("DropDownList1")

Render Output:
<select id="DropDownList1" name="DropDownList1">
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

2.
@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };

    ViewData["DropDownList1"] = items;
}
@Html.DropDownList("DropDownList1","Select Option") //Expression, optionLabel

Render Output:
<select id="DropDownList1" name="DropDownList1">
<option value="">Select Option</option>
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

3.
@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };
}

@Html.DropDownList("DropDownList1",items) //Expression, selectList

Render Output:

<select id="DropDownList1" name="DropDownList1">
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

4.
@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };
}

@Html.DropDownList("DropDownList1",items,"Select Option") //Expression, selectList, optionLabel

Render Output:
<select id="DropDownList1" name="DropDownList1">
<option value="">Select Option</option>
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

5.
@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };
}

@Html.DropDownList("ddlOptions",items,new { id="ddl1" }) //Expression, selectList, HtmlAttributes

Render Output:
<select id="ddl1" name="ddlOptions">
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

6.
@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };
}

@Html.DropDownList("ddlOptions",items,"Select Option", new { id="ddl1" }) //Expression, selectList, optionLabel, HtmlAttributes

Render Output:
<select id="ddl1" name="ddlOptions">
<option value="">Select Option</option>
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

@Html.ListBox():
-----------------------
Both DropDownList and ListBox helpers will return "<select>" element. DropDownList allows single item selection, whereas ListBox allows for multiple selection.

1.
@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };

    ViewData["ListBox1"] = items;
}

@Html.ListBox("ListBox1") //Expression

Render Output:
<select id="ListBox1" multiple="multiple" name="ListBox1">
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

2.
@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };
}

@Html.ListBox("ListBox1",items) //Expression, selectList

Render Output:
<select id="ListBox1" multiple="multiple" name="ListBox1">
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

3.
@{ 
    List<SelectListItem> items = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Option1",Value="Opt1"},
        new SelectListItem(){Text="Option2",Value="Opt2"},
        new SelectListItem(){Text="Option3",Value="Opt3"}
    };
}

@Html.ListBox("lstOptions",items, new { id="listBox1" }) //Expression, selectList, HtmlAttribute

Render Output:
<select id="listBox1" multiple="multiple" name="lstOptions">
<option value="Opt1">Option1</option>
<option value="Opt2">Option2</option>
<option value="Opt3">Option3</option>
</select>

@Html.Hidden():
-----------------------
@Html.Hidden() method is used to render a hidden field.

1.
@Html.Hidden("HiddenField1") //Expression

Render Output:
<input id="HiddenField1" name="HiddenField1" type="hidden" value="" />

2.
@Html.Hidden("HiddenField1",101) //Expression, Value

Render Output:
<input id="HiddenField1" name="HiddenField1" type="hidden" value="101" />

3.
@Html.Hidden("HiddenField1",101,new { id = "hidden1" }) //Expression, Value, HtmlAttribute

Render Output:
<input id="hidden1" name="HiddenField1" type="hidden" value="101" />

Strongly Typed HTML Helpers:
---------------------------------------------
These helpers are used to render the most common types of HTML elements in strongly typed Page/View like as HTML text boxes, checkboxes etc. The HTML elements are created based on model properties.

The strongly typed HTML helpers work on lambda expression. The model object is passed as a value to lambda expression, and you can select the field or property from model object to be used to set the id, name and value attributes of the HTML helper.

The strongly-typed HTML helpers enables better compile-time checking of your Page/View (allowing you to find errors at build-time instead of at runtime), and also supports richer intellisense when editing your View/Page templates within Visual Studio.

These are following commonly used strongly-typed HTML helpers:
------------------------------------------------------------------------------------------------
Html.LabelFor()
Html.TextBoxFor()
Html.TextAreaFor()
Html.PasswordFor()
Html.CheckBoxFor()
Html.RadioButtonFor()
Html.DropDownListFor()
Html.ListBoxFor()
Html.HiddenFor()

Html.LabelFor():
----------------------
Returns an HTML label element and the property name of the property that is represented by the specified expression.

1.
@Html.LabelFor(model=>Model.Name) // Expression

Render Output:
<label for="Name">Name</label>

2.
@Html.LabelFor(model=>Model.Name,"Enter Name") //Expression, labelText

Render Output:
<label for="Name">Enter Name</label>

3.
@Html.LabelFor(model=>Model.Name,new { style = "color:blue" }) //Expression, htmlAttribute

Render Output:
<label for="Name" style="color:blue">Name</label>

4.
@Html.LabelFor(model=>Model.Name,"Enter Name",new { style = "color:blue" }) //Expression, labelText, htmlAttribute

Render Output:
<label for="Name" style="color:blue">Enter Name</label>

Html.TextBoxFor():
--------------------------
Returns a text input element for each property in the object that is represented by the specified expression.

1.
@Html.TextBoxFor(model=>Model.Name) //Expression

Render Output:
<input id="Name" name="Name" type="text" value="Smith" />

2.
@Html.TextBoxFor(model=>Model.Name,new { style = "color:red" }) //Expression, htmlAttribute

Render Output:
<input id="Name" name="Name" style="color:red" type="text" value="Smith" />

3.
@Html.TextBoxFor(model=>Model.Fee,"{0:C}") //Expression, format

Render Output:
<input id="Fee" name="Fee" type="text" value="₹ 15,000.00">

4.
@Html.TextBoxFor(model=>Model.Fee,"{0:C}",new {style="background-color:yellow"}) //Expression, format, htmlAttribute

Render Output:
<input id="Fee" name="Fee" style="background-color:yellow" type="text" value="₹ 15,000.00">

Html.TextAreaFor():
----------------------------
It returns an html TextArea element for each property in the object that is represeneted by the specified expression.

1.
@Html.TextAreaFor(model=>Model.Address) //Expression

Render Output:
<textarea id="Address" name="Address">
S.R. Nagar Hyderabad
</textarea>

2.
@Html.TextAreaFor(model=>Model.Address,new {style="color:red"}) //Expression, htmlAttributes

Render Output:
<textarea id="Address" name="Address" style="color:red">
S.R. Nagar Hyderabad
</textarea>

3.
@Html.TextAreaFor(model=>Model.Address,5,75,new {style="color:red"}) //Expression, rows, cols, htmlAttributes

Render Output:
<textarea cols="75" id="Address" name="Address" rows="5" style="color:red">
S.R. Nagar Hyderabad
</textarea>

Html.PasswordFor():
-----------------------------
Returns a password input element for each property in the object that is represented by an expression.

1.
@Html.PasswordFor(model=>Model.OTP) //Expression

Render Output:
<input id="OTP" name="OTP" type="password" />

2.
@Html.PasswordFor(model=>Model.OTP,new { @class = "class1" }) //Expression, htmlAttributes

Render Output:
<input class="class1" id="OTP" name="OTP" type="password" />

Html.CheckBoxFor():
-----------------------------
Returns a checkbox input element for each property in the object that is represented by an expression.

1.
@Html.CheckBoxFor(model=>Model.IsFeePaid) //Expression

Render Output:
<input checked="checked" id="IsFeePaid" name="IsFeePaid" type="checkbox" value="true" />
<input name="IsFeePaid" type="hidden" value="false" />

Note: It renders checked="checked" if model property (Ex: IsFeePaid) is set to true

2. 
@Html.CheckBoxFor(model=>Model.IsFeePaid,new {disabled="disabled"}) //Expression, htmlAttributes

Render Output:
<input checked="checked" disabled="disabled" id="IsFeePaid" name="IsFeePaid" type="checkbox" value="true" />
<input name="IsFeePaid" type="hidden" value="false" />

Html.RadioButtonFor():
---------------------------------
Returns a radio input element for each property in the object that is represented by an expression.

1.
@Html.RadioButtonFor(model=>Model.Gender,"Male") //Expression, value

Render Output:

<input checked="checked" id="Gender" name="Gender" type="radio" value="Male" />

2.
@Html.RadioButtonFor(model=>Model.Gender,"Male",new { id="rdbMale" } //Expression, value, htmlAttributes

Render Output:
<input checked="checked" id="rdbMale" name="Gender" type="radio" value="Male" />

Real Time Uses of RadioButton (Group of RadioButtons):
----------------------------------------------------------------------------------
@Html.Label("Gender"):
@Html.RadioButtonFor(model => Model.Gender, "Male", new { id = "rdbMale" })
@Html.Label("rdbMale", "Male")
@Html.RadioButtonFor(model => Model.Gender, "Female", new { id = "rdbFemale" })
@Html.Label("rdbFemale", "Female")

Html.DropDownListFor():
------------------------------------
It returns an html select element for each property in the object that is represented by an expression using the specified list item.

1.
@{ 
    List<SelectListItem> genders = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Male",Value="Male"},
        new SelectListItem(){Text="Female",Value="Female"}
    };
}
@Html.DropDownListFor(model=>Model.Gender,genders) //Expression, selectList

Render Output:
<select id="Gender" name="Gender">
<option selected="selected" value="Male">Male</option>
<option value="Female">Female</option>
</select>

2.
@Html.DropDownListFor(model=>Model.Gender,genders,"Select Gender") //Expression, selectList, optionLabel

Render Output:
<select id="Gender" name="Gender">
<option value="">Select Gender</option>
<option selected="selected" value="Male">Male</option>
<option value="Female">Female</option>
</select>

3.
@Html.DropDownListFor(model=>Model.Gender,genders,new { id = "ddlGender" }) //Expression, selectList, htmlAttributes

Render Output:
<select id="ddlGender" name="Gender">
<option selected="selected" value="Male">Male</option>
<option value="Female">Female</option>
</select>

4.
@Html.DropDownListFor(model=>Model.Gender,genders,"Select Gender",new { id = "ddlGender" }) //Expression, selectList, optionLabel, htmlAttributes

Render Output:
<select id="ddlGender" name="Gender"><option value="">Select Gender</option>
<option selected="selected" value="Male">Male</option>
<option value="Female">Female</option>
</select>

Html.ListBoxFor():
-------------------------
It returns an html select element for each property in the object that is represented by an expression using the specified list item for multiple selection items.

1.
@{
    List<SelectListItem> cityList = new List<SelectListItem>()
    {
        new SelectListItem(){Text="Pune",Value="Pune"},
        new SelectListItem(){Text="Mumbai",Value="Mumbai"},
        new SelectListItem(){Text="Delhi",Value="Delhi"},
        new SelectListItem(){Text="Chennai",Value="Chennai"},
        new SelectListItem(){Text="Hyderabad",Value="Hyderabad"}
    };
}
@Html.ListBoxFor(model => Model.Cities, cityList) //Expression, selectList

Render Output:
<select id="Cities" multiple="multiple" name="Cities">
<option value="Pune">Pune</option>
<option value="Mumbai">Mumbai</option>
<option selected="selected" value="Delhi">Delhi</option>
<option value="Chennai">Chennai</option>
<option selected="selected" value="Hyderabad">Hyderabad</option>
</select>

2.
@Html.ListBoxFor(model => Model.Cities, cityList, new { size = 10 }) //Expression, selectList, htmlAttributes

Render Output:
<select id="Cities" multiple="multiple" name="Cities" size="10">
<option value="Pune">Pune</option>
<option value="Mumbai">Mumbai</option>
<option selected="selected" value="Delhi">Delhi</option>
<option value="Chennai">Chennai</option>
<option selected="selected" value="Hyderabad">Hyderabad</option>
</select>

Html.HiddenFor():
------------------------
It returns an html hidden input element for each property in the object that is represented by an expression.

1.
@Html.HiddenFor(model=>Model.StudentId) //Expression

Render Output:
<input id="StudentId" name="StudentId" type="hidden" value="101" />

2.
@Html.HiddenFor(model=>Model.StudentId, new { id = "Hidden1" }) //Expression, htmlAttribute

Render Output:
<input id="Hidden1" name="StudentId" type="hidden" value="101" />

Templated HTML Helpers:
--------------------------------------
Templated Helpers can be broadly classified into 2 catergories:

i) Display Templates

ii) Editor Templates

Display Templates:
---------------------------
Html.Display():
--------------------
If we have stored model data in ViewData, then we can use this templated helper using the key that was used to store model data in ViewData.

Example:

Models: Student.cs:

namespace ASP.NETCoreWebApp1.Models
{
    public class Student
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Email { get; set; }
        public string City { get; set; }

    }
}

Pages: Example.cshtml.cs:

using Microsoft.AspNetCore.Mvc.RazorPages;

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };

            ViewData["StudentDetails"] = student;
        }
    }
}

Pages: Example.cshtml:

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
 }

@Html.Display("StudentDetails")

Output:
Name
Smith
Age
23
Email
smith@gmail.com
City
Pune

Bind the model object data in a pre-defined template using Html.Display() method:
-----------------------------------------------------------------------------------------------------------------------
Pages: Example.cshtml.cs:

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };
        }
    }
}

Pages: Example.cshtml:

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}

@Html.Display("student")

Output:
Name
Smith
Age
23
Email
smith@gmail.com
City
Pune

Displaying Individual Model object property fields using Display() & DisplayName() method:
-------------------------------------------------------------------------------------------------------------------------------------
Pages: Example.cshtml.cs:

using Microsoft.AspNetCore.Mvc.RazorPages;

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };
        }
    }
}

Pages: Example.cshtml:

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}
<p>
    @Html.DisplayName("student.Name"):
    @Html.Display("student.Name")
</p>
<p>
    @Html.DisplayName("student.Email"):
    @Html.Display("student.Email")
</p>
<p>
    @Html.DisplayName("student.Age"):
    @Html.Display("student.Age")
</p>
<p>
    @Html.DisplayName("student.City"):
    @Html.Display("student.City")
</p>

Output:
Name: Smith

Email: smith@gmail.com

Age: 23

City: Pune

Note: DisplayName(string expression) method is used to returns display name of the specified expression. It is used as caption (label) for data which bind using Display() method.

For Example:

Models: Student.cs

using System.ComponentModel.DataAnnotations;

namespace ASP.NETCoreWebApp1.Models
{
    public class Student
    {
        [Display(Name="Student Name")]
        public string Name { get; set; }
        public int Age { get; set; }
        [Display(Name="Email Address")]
        public string Email { get; set; }
        public string City { get; set; }
    }
}

Pages: Example.cshtml.cs

using Microsoft.AspNetCore.Mvc.RazorPages;

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };
        }
    }
}

Pages: Example.cshtml:

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}
<p>
    @Html.DisplayName("student.Name"):
    @Html.Display("student.Name")
</p>
<p>
    @Html.DisplayName("student.Email"):
    @Html.Display("student.Email")
</p>
<p>
    @Html.DisplayName("student.Age"):
    @Html.Display("student.Age")
</p>
<p>
    @Html.DisplayName("student.City"):
    @Html.Display("student.City")
</p>

Output:
Student Name: Smith

Email Address: smith@gmail.com

Age: 23

City: Pune

Html.DisplayFor():
-------------------------
This template can be used with a strongly-typed page/view. If our model has properties that return complex objects, then this templated helper is very useful. It uses lambda expression.

Example:

Models: Student.cs

namespace ASP.NETCoreWebApp1.Models
{
    public class Student
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Email { get; set; }
        public string City { get; set; }
    }
}

Pages: Example.cshtml.cs

using Microsoft.AspNetCore.Mvc.RazorPages;

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };
        }
    }
}

Pages: Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}

@Html.DisplayFor(model=>Model.student)

Output:
Name
Smith
Age
23
Email
smith@gmail.com
City
Pune

Displaying Individual Model object property fields using DisplayFor() & DisplayNameFor() method:
---------------------------------------------------------------------------------------------------------------------------------------------
Pages: Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}

<p>
    @Html.DisplayNameFor(model => Model.student.Name):
    @Html.DisplayFor(model => Model.student.Name)
</p>
<p>
    @Html.DisplayNameFor(model => Model.student.Email):
    @Html.DisplayFor(model => Model.student.Email)
</p>
<p>
    @Html.DisplayNameFor(model => Model.student.Age):
    @Html.DisplayFor(model => Model.student.Age)
</p>
<p>
    @Html.DisplayNameFor(model => Model.student.City):
    @Html.DisplayFor(model => Model.student.City)
</p>

Output:
Name: Smith

Email: smith@gmail.com

Age: 23

City: Pune

Note: DisplayNameFor(expression) method is used to returns display name of the specified expression. It is used as caption (label) for data which bind using DisplayFor() method. It uses lambda expression.

Html.DisplayForModel():
----------------------------------
This templated helper method can be used with strongly-typed page/view. It walks through each property, in the model to display the object. It returns Html markup for each property in the model. Html.DisplayForModel build the HTML for an entire model object.

Example:

Pages: Example.cshtml.cs
using Microsoft.AspNetCore.Mvc.RazorPages;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Email { get; set; }
        public string City { get; set; }

        public void OnGet()
        {
            Name = "Smith";
            Age = 23;
            Email = "smith@gmail.com";
            City = "Hyderabad";
        }
    }
}

Pages: Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}

@Html.DisplayForModel()


Edit Templated Helper:
-------------------------------
Html.Editor():
-------------------
If we have stored model data in ViewData, then we can use this templated helper using the key that was used to store model data in ViewData to display in edit mode.

Example:
Models: Student.cs

namespace ASP.NETCoreWebApp1.Models
{
    public class Student
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Email { get; set; }
        public string City { get; set; }
    }
}

Pages: Example.cshtml.cs:

using Microsoft.AspNetCore.Mvc.RazorPages;

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };

            ViewData["StudentDetails"] = student;
        }
    }
}

Pages: Example.cshtml:

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}

@Html.Editor("StudentDetails")

Bind the model object data in a pre-defined template using Html.Editor() method:
---------------------------------------------------------------------------------------------------------------------
Pages: Example.cshtml.cs

using Microsoft.AspNetCore.Mvc.RazorPages;

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };
        }
    }
}

Pages: Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}

@Html.Editor("student")

Displaying Individual Model object property fields in edit mode using Editor() method:
----------------------------------------------------------------------------------------------------------------------------
Pages: Example.cshtml.cs

using Microsoft.AspNetCore.Mvc.RazorPages;

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };
        }
    }
}

Pages: Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}
<p>
    @Html.DisplayName("student.Name"):
    @Html.Editor("student.Name")
</p>
<p>
    @Html.DisplayName("student.Email"):
    @Html.Editor("student.Email")
</p>
<p>
    @Html.DisplayName("student.Age"):
    @Html.Editor("student.Age")
</p>
<p>
    @Html.DisplayName("student.City"):
    @Html.Editor("student.City")
</p>

Html.EditorFor():
-----------------------
This templated helper method can be used with a strongly-typed page/view. If a model has property that returns complex object type then this templated helper is very useful for editing. It uses lambda expression.

Models: Student.cs

namespace ASP.NETCoreWebApp1.Models
{
    public class Student
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Email { get; set; }
        public string City { get; set; }
    }
}

Pages: Example.cshtml.cs

using Microsoft.AspNetCore.Mvc.RazorPages;

using ASP.NETCoreWebApp1.Models;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public Student student { get; set; }

        public void OnGet()
        {
            student = new Student()
            {
                Name = "Smith",
                Email = "smith@gmail.com",
                Age = 23,
                City = "Pune"
            };
        }
    }
}

Pages: Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}

@Html.EditorFor(model=>model.student) //Whole model object data in a pre-defined template

Displaying Individual Model object property fields in edit mode using EditorFor() method:
--------------------------------------------------------------------------------------------------------------------------------
Pages: Example.cshtml:

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}
<p>
    @Html.DisplayNameFor(model=>Model.student.Name):
    @Html.EditorFor(model => Model.student.Name)
</p>
<p>
    @Html.DisplayNameFor(model => Model.student.Email):
    @Html.EditorFor(model => Model.student.Email)
</p>
<p>
    @Html.DisplayNameFor(model => Model.student.Age):
    @Html.EditorFor(model => Model.student.Age)
</p>
<p>
    @Html.DisplayNameFor(model => Model.student.City):
    @Html.EditorFor(model => Model.student.City)
</p>

Html.EditorForModel():
--------------------------------
This templated helper method can be used with a strongly-typed page/view. It walks through each property, in the model to display the object in the edit mode. So, it is recommeneded method if you want to edit the whole model object at a time.

Example:

Pages: Example.cshtml.cs:

using Microsoft.AspNetCore.Mvc.RazorPages;

namespace ASP.NETCoreWebApp1.Pages
{
    public class ExampleModel : PageModel
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Email { get; set; }
        public string City { get; set; }

        public void OnGet()
        {
            Name = "Smith";
            Age = 23;
            Email = "smith@gmail.com";
            City = "Hyderabad";
        }
    }
}

Pages: Example.cshtml:
@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@{
}
@Html.EditorForModel()

Custom Html Helpers:
-------------------------------
If you want to create your own HTML helpers that can also be done very easily. There are quite a few way of creating custom html helpers. These are the following ways:

	- Creating a static method

	- Writing an extension method

Creating Custom Html Helpers using Static Methods:
----------------------------------------------------------------------------
The easiest way to create a new HTML Helper is to create a static method that returns an IHtmlContent or a plain string

For Example: Create a new HTML Helper that renders an HTML <label> tag.

Create a new folder named 'Helpers' under root folder of the appplication, then create class file with static methods which returns an IHtmlContent.

Example1:

Helpers -> MyHTMLHelpers.cs

using Microsoft.AspNetCore.Html;
namespace ASP.NETCoreWebApp1.Helpers
{
    public class MyHTMLHelpers
    {
        public static IHtmlContent Label(string target, string text)
        {
            return new HtmlString(string.Format("<label for='{0}'>{1}</label>", target, text));
        }
    }
}

Pages: Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@using ASP.NETCoreWebApp1.Helpers
@{
}

@MyHTMLHelpers.Label("Name","Enter Your Name")

Example2:
Create an example of custom html helper, in which create a new html custom helper that returns an Html <input type="text" /> element

Helpers -> MyHTMLHelpers.cs

using Microsoft.AspNetCore.Html;
namespace ASP.NETCoreWebApp1.Helpers
{
    public class MyHTMLHelpers
    {
        public static IHtmlContent TextBox(string name, string value = "")
        {
            return new HtmlString(string.Format("<input type='text' id='{0}' name='{0}' value='{1}' style='background-color:aqua;color:red' />", name, value));
        }
    }
}

Pages -> Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@using ASP.NETCoreWebApp1.Helpers
@{
}

@MyHTMLHelpers.TextBox("Name")

Example3:
Create a new custom html helper that renders an html <ul> or <ol> tag to represent a list of items

Helpers -> MyHTMLHelpers.cs:

using Microsoft.AspNetCore.Html;
namespace ASP.NETCoreWebApp1.Helpers
{
    public class MyHTMLHelpers
    {
        public static IHtmlContent DisplayList(string[] items, string type = "ul")
        {
            string list = "<" + type + ">";
            foreach(string item in items)
            {
                list += "<li>" + item + "</li>";
            }
            list += "</" + type + ">";

            return new HtmlString(list);
        }
    }
}

Pages -> Example.cshtml

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@using ASP.NETCoreWebApp1.Helpers
@{
}

@{ 
    string[] fruits = new string[]
    {
        "Banana",
        "Apple",
        "Pinaple",
        "Guava",
        "Orange"
    };
}
@MyHTMLHelpers.DisplayList(fruits)	//By Default in <ul>

@MyHTMLHelpers.DisplayList(fruits,"ol")

Creating HTML Helpers with Extension Methods:
----------------------------------------------------------------------
If you want to create HTML helpers that work just like standard HTML helpers included in the ASP.NET Core Razor Pages/MVC framework then you need to create extension methods. Extension methods enable you to add new methods to an existing class. When creating an HTML helper method, you add new methods to the HtmlHelper class represented by a page/view's @Html property.

The below class adds an extension method to the HtmlHelper class named CustomLabel().

There are a couple of things that you should notice about this class.

First, notice that the class is a static class. You must define an extenstion method with static class.

Second, notice that the first parameter of the CustomLabel() is preceded by the keyword 'this'. The first parameter of an extension method indicates the class that the extension method extends.

Helpers -> MyExtensionHtmlHelpers.cs

using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace ASP.NETCoreWebApp1.Helpers
{
    public static class MyExtensionHtmlHelpers
    {
        public static IHtmlContent CustomLabel(this IHtmlHelper helper, string target, string text)
        {
            return new HtmlString(string.Format("<label style='color:blue' for='{0}'>{1}</label>", target, text));
        }
    }
}

Pages -> Example.cshtml
@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@using ASP.NETCoreWebApp1.Helpers
@{
}
@Html.CustomLabel("Name","Enter Your Name: ")

Example2: Create a custom html helper i.e. "CustomImage" using extension method approach as follows:

Helpers -> MyExtensionHtmlHelpers.cs:

using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace ASP.NETCoreWebApp1.Helpers
{
    public static class MyExtensionHtmlHelpers
    {
          public static IHtmlContent CustomImage(this IHtmlHelper helper, string src, string alt="Image", int width=200, int height = 200)
        {
            //return new HtmlString(string.Format("<img src='{0}' alt='{1}' width='{2}' height='{3}' />", src, alt, width, height));

            //OR
            var imageTag = new TagBuilder("img");
            imageTag.MergeAttribute("src", src);
            imageTag.MergeAttribute("alt", alt);
            imageTag.MergeAttribute("width", width.ToString());
            imageTag.MergeAttribute("height", height.ToString());

            return imageTag.RenderSelfClosingTag();
        }
    }
}

Pages - Example.cshtml:

@page
@model ASP.NETCoreWebApp1.Pages.ExampleModel
@using ASP.NETCoreWebApp1.Helpers
@{
}
@Html.CustomImage("/Images/RSN-Banner.png")
<hr />
@Html.CustomImage("/Images/RSN-Banner.png", "Banner Image", 500, 250)
